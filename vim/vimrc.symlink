" set encoding
set encoding=utf-8
scriptencoding utf-8

"#--------------------------------------------------#
"# junegunn/vim-plug                                #
"#--------------------------------------------------#
" install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif
" run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')
" colorschemes
Plug 'arcticicestudio/nord-vim'
Plug 'w0ng/vim-hybrid'
" highlights
Plug 'slim-template/vim-slim'
Plug 'chr4/nginx.vim'
Plug 'posva/vim-vue'
" others
Plug 'airblade/vim-gitgutter'
" Plug 'edkolev/tmuxline.vim'
" Plug 'fatih/vim-go'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-user'
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'
Plug 'lambdalisue/fern-renderer-nerdfont.vim'
Plug 'lambdalisue/glyph-palette.vim'
Plug 'lambdalisue/nerdfont.vim'
Plug 'mattn/vim-lsp-settings'
Plug 'ojroques/vim-oscyank'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
call plug#end()

"#--------------------------------------------------#
"# general settings                                 #
"#--------------------------------------------------#
" enable modeline
set modeline
" enable plugin and indent using filetype
filetype plugin indent on
" enable syntax
syntax on
" set mapleader
let mapleader = ","
"行番号の表示
set number
"入力中のコマンドの表示
set showcmd
" disable default showmode
set noshowmode
"コマンド補完の設定
set wildmenu
"現在の行を強調表示
set cursorline
"ビープ音の無効化
set visualbell t_vb=
set noerrorbells
"対応する括弧を表示
set showmatch
"スワップファイルの無効化
set noswapfile
"バックアップファイルの無効化
set nobackup
"8進数を使わない
set nrformats=
"検索時に小文字で入力した場合、大文字と区別しない
set ignorecase
set smartcase
"インクリメントサーチの有効化
set incsearch
"検索語のハイライト表示
set hlsearch
"ESC連打でハイライトの無効化
nnoremap <ESC><ESC> :nohlsearch<CR>
"Tabの可視化
set list listchars=tab:>-
"Tabで半角スペースを入力
set expandtab
"行頭でのTabの表示幅
set shiftwidth=2
"行頭以外でのTabの表示幅
set tabstop=2
"改行時のインデントの保持
set autoindent
" set updatetime
set updatetime=300
" always show signcolumn
set signcolumn=yes
" enable to delete any str in insert
set backspace=indent,eol,start

"#--------------------------------------------------#
"# common key maps                                  #
"#--------------------------------------------------#
"normal
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
nnoremap q <Nop>
nnoremap <C-a> ^
nnoremap <C-e> $
" quickfix
nnoremap <leader>n :cnext<CR>
nnoremap <leader>p :cprevious<CR>
nnoremap <leader>c :cclose<CR>
"insert
inoremap <C-b> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-f> <Right>
"画面分割の設定
nnoremap s <Nop>
nnoremap ss :split<Return><C-w>w
nnoremap sv :vsplit<Return><C-w>w
nnoremap <Space> <C-w>w
nnoremap sh <C-w>h
nnoremap sk <C-w>k
nnoremap sj <C-w>j
nnoremap sl <C-w>l
"command
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>


"##=============##
"##  highlight  ##
"##=============##
"#--------------------------------------------------#
"# arcticicestudio/nord-vim                         #
"#--------------------------------------------------#
function! s:customize_nord() abort
  hi Visual ctermbg=0 ctermfg=6
  hi DiffAdd cterm=NONE
  hi DiffChange cterm=NONE
  hi DiffDelete cterm=NONE
  hi DiffText cterm=NONE
endfunction
augroup __nord__
  autocmd!
  autocmd ColorScheme nord call s:customize_nord()
augroup END
"#--------------------------------------------------#
"# w0ng/vim-hybrid                                  #
"#--------------------------------------------------#
function! s:pre_setup_hybrid() abort
  set background=dark
  let g:hybrid_custom_term_colors = 1
  let g:hybrid_reduced_contrast = 1
endfunction
augroup __hybrid__
  autocmd!
  autocmd colorschemepre hybrid call s:pre_setup_hybrid()
augroup END
"#--------------------------------------------------#
"# common highlight settings                        #
"#--------------------------------------------------#
" customize highlights
function! s:setup_hi_groups() abort
  hi FullWidthSpace ctermbg=11
  hi TrailSpace ctermbg=11
endfunction
function! s:setup_matches() abort
  call matchadd("FullWidthSpace", "　")
  call matchadd("TrailSpace", '\s\+$')
endfunction
augroup __custom_hi__
  autocmd!
  autocmd Colorscheme * call s:setup_hi_groups()
  autocmd VimEnter,WinEnter * call s:setup_matches()
augroup end
" set default colorscheme
colorscheme hybrid


"##=============##
"##   plugins   ##
"##=============##
"#--------------------------------------------------#
"# airblade/vim-gitgutter                           #
"#--------------------------------------------------#
" dont show signs at startup
let g:gitgutter_signs=0
" toggle gitgutter_signs with <leader>g
nnoremap <leader>g :GitGutterSignsToggle<CR>

"#--------------------------------------------------#
"# edkolev/tmuxline.vim                             #
"#--------------------------------------------------#
" set tmux preset
" let g:tmuxline_preset = ''

"#--------------------------------------------------#
"# hrsh7th/vim-vsnip                                #
"#--------------------------------------------------#
" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'

"#--------------------------------------------------#
"# lambdalisue/glyph-palette.vim                    #
"#--------------------------------------------------#
augroup __glyph-palette__
  autocmd!
  autocmd FileType fern call glyph_palette#apply()
augroup END

"#--------------------------------------------------#
"# lambdalisue/fern                                 #
"#--------------------------------------------------#
" use nerdfont to render tree items
let g:fern#renderer = 'nerdfont'
" hide cursor
let g:fern#hide_cursor = 1
" show hidden files
let g:fern#default_hidden = 1
" toggle fern with <C-n>
nnoremap <silent> <C-n> :<C-u>Fern . -drawer -stay -keep -toggle -reveal=%<CR>

function! s:vimenter_fern() abort
  " open fern when no args given
  if argc() == 0 && !exists('s:std_in')
    Fern . -drawer -keep -toggle
  endif
endfunction
function! s:filetype_fern() abort
  " hide number
  setlocal nonumber
  " use open:select as default
  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)
  " set key maps
  nmap <buffer><nowait> s <Plug>(fern-action-open:split)
  nmap <buffer><nowait> v <Plug>(fern-action-open:vsplit)
  nmap <buffer><nowait> r <Plug>(fern-action-reload)
  nmap <buffer><nowait> N <Plug>(fern-action-new-path)
  nmap <buffer><nowait> <CR> <Plug>(fern-action-cd)<Plug>(fern-action-enter)
  nmap <buffer><nowait> z <Plug>(fern-action-zoom:full)
endfunction
augroup __fern__
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * ++nested call s:vimenter_fern()
  autocmd FileType fern call s:filetype_fern()
augroup END

"#--------------------------------------------------#
"# ojroques/vim-oscyank                             #
"#--------------------------------------------------#
" yank to clipboard using OSC52
vnoremap <leader>y :OSCYank<CR>

"#--------------------------------------------------#
"# prabirshrestha/vim-lsp                           #
"#--------------------------------------------------#
" show error msg for current line in popup
let g:lsp_diagnostics_float_cursor = 1
" dont show code action signs
let g:lsp_document_code_action_signs_enabled = 0

function! s:vim_lsp_load_general_settings() abort
  " use lsp for monifunc
  setlocal omnifunc=lsp#complete
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gh <plug>(lsp-hover)
  nmap <buffer> gr <plug>(lsp-rename)
  nmap <buffer> gn <plug>(lsp-next-diagnostic)
  nmap <buffer> gp <plug>(lsp-previous-diagnostic)
endfunction

" import and format before save in go
function! s:vim_lsp_modify_go() abort
  LspCodeActionSync source.organizeImports
  LspDocumentFormatSync
endfunction

augroup __vim_lsp__
  autocmd!
  autocmd User lsp_buffer_enabled call s:vim_lsp_load_general_settings()
  autocmd BufWritePre *.go call s:vim_lsp_modify_go()
augroup END

"#--------------------------------------------------#
"# vim-airline/vim-airline                          #
"#--------------------------------------------------#
" use powerline fonts
let g:airline_powerline_fonts = 1
" enable tabline extension
let g:airline#extensions#tabline#enabled = 1
" dont show buffers
let g:airline#extensions#tabline#show_buffers = 0
" dont show buffers on the right of tabs
let g:airline#extensions#tabline#show_splits = 0
" dont show tab count on the right of tabs
let g:airline#extensions#tabline#show_tab_count = 0
" remove 'X' at the end of the tabline
let g:airline#extensions#tabline#show_close_button = 0
" dont show tabs or buffers label
let g:airline#extensions#tabline#show_tab_type = 0
" dont show tabline when single tab
let g:airline#extensions#tabline#tab_min_count = 2
" show tab index (not split count)
let g:airline#extensions#tabline#tab_nr_type = 1

"#--------------------------------------------------#
"# scrooloose/nerdtree                              #
"#--------------------------------------------------#
"augroup nerdtree
"  autocmd!
"augroup END
"" toggle nerdtree with <C-n>
"noremap <C-n> :NERDTreeToggle<CR>
"" show hidden files
"let NERDTreeShowHidden = 1
"" change default key maps
"autocmd nerdtree FileType nerdtree nmap <buffer><nowait> s :call<Space>nerdtree#ui_glue#invokeKeyMap('i')<CR>
"autocmd nerdtree FileType nerdtree nmap <buffer><nowait> v :call<Space>nerdtree#ui_glue#invokeKeyMap('s')<CR>
"" open nerdtree when starting vim without any args or stdin
"function! s:init_nerdtree() abort
"  if argc() == 0 && !exists('s:std_in')
"    NERDTree
"    wincmd p
"    close
"  endif
"endfunction
"autocmd nerdtree StdinReadPre * let s:std_in=1
"autocmd nerdtree VimEnter * call s:init_nerdtree()

"#--------------------------------------------------#
"# fatih/vim-go                                     #
"#--------------------------------------------------#
"let g:go_fmt_command = "goimports"
"let g:go_metalinter_autosave = 1
"let g:go_list_type = "quickfix"
