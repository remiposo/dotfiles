set encoding=utf-8
scriptencoding utf-8

"モードラインを有効化
set modeline
"ファイル形式別プラグイン,インデントの有効化
filetype plugin indent on
"構文ハイライトの有効化
syntax on

"vim-plugを自動でインストール
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"plugin
call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'fatih/vim-go'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-user'
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'
Plug 'lambdalisue/fern-renderer-nerdfont.vim'
Plug 'lambdalisue/glyph-palette.vim'
Plug 'lambdalisue/nerdfont.vim'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'w0ng/vim-hybrid'

"ハイライト系
Plug 'slim-template/vim-slim'
Plug 'chr4/nginx.vim'
Plug 'posva/vim-vue'
call plug#end()

let mapleader = ","

"normal
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k
nnoremap q <Nop>
noremap <C-a> ^
noremap <C-e> $

"insert
inoremap <C-b> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-f> <Right>

"画面分割の設定
nnoremap s <Nop>
nnoremap ss :split<Return><C-w>w
nnoremap sv :vsplit<Return><C-w>w
nnoremap <Space> <C-w>w
nnoremap sh <C-w>h
nnoremap sk <C-w>k
nnoremap sj <C-w>j
nnoremap sl <C-w>l

"command
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

"colorscheme
set t_Co=256
set background=dark
colorscheme hybrid
"行番号の色の設定
hi lineNr ctermfg=243
hi CursorLine ctermbg=238
hi Visual ctermbg=238
"背景透過
hi Normal ctermbg=none
hi NonText ctermbg=none
hi LineNr ctermbg=none
hi Folded ctermbg=none
hi EndOfBuffer ctermbg=none
hi SignColumn ctermbg=none

" always show signcolumn
set signcolumn=yes
" set updatetime 4000->300
set updatetime=300
"行番号の表示
set number
"入力中のコマンドの表示
set showcmd
" disable default showmode
set noshowmode
"コマンド補完の設定
set wildmenu
"現在の行を強調表示
set cursorline
"ビープ音の無効化
set visualbell t_vb=
set noerrorbells
"対応する括弧を表示
set showmatch
"スワップファイルの無効化
set noswapfile
"バックアップファイルの無効化
set nobackup
"8進数を使わない
set nrformats=

"検索時に小文字で入力した場合、大文字と区別しない
set ignorecase
set smartcase
"インクリメントサーチの有効化
set incsearch
"検索語のハイライト表示
set hlsearch
"ESC連打でハイライトの無効化
nnoremap <ESC><ESC> :nohlsearch<CR>

"Tabの可視化
set list listchars=tab:>-
"Tabで半角スペースを入力
set expandtab
"行頭でのTabの表示幅
set shiftwidth=2
"行頭以外でのTabの表示幅
set tabstop=2
"改行時のインデントの保持
set autoindent

"Ctags
set tags=.tags;$HOME
nnoremap <C-]> g<C-]>

"全角スペースの可視化
highlight FullWidthSpace
  \ cterm=underline
  \ ctermfg=LightGreen
  \ gui=underline
  \ guifg=LightGreen
augroup FullWidthSpace
  autocmd!
  autocmd VimEnter,WinEnter * call matchadd("FullWidthSpace", "　")
augroup END
"行末スペースの可視化
highlight EndSpace
  \ ctermbg=199
  \ guibg=Cyan
augroup EndSpace
  autocmd!
  autocmd VimEnter,WinEnter * match EndSpace /\s\+$/
augroup END

"ヤンクをクリップボードに保存
set clipboard+=unnamed

"#--------------------------------------------------#
"# airblade/vim-gitgutter                           #
"#--------------------------------------------------#
" dont show signs at startup
let g:gitgutter_signs=0
" toggle gitgutter_signs with <leader>g
nnoremap <leader>g :GitGutterSignsToggle<CR>

"#--------------------------------------------------#
"# lambdalisue/glyph-palette.vim                    #
"#--------------------------------------------------#
augroup __glyph-palette__
  autocmd!
  autocmd FileType fern call glyph_palette#apply()
augroup END

"#--------------------------------------------------#
"# lambdalisue/fern                                 #
"#--------------------------------------------------#
" use nerdfont to render tree items
let g:fern#renderer = 'nerdfont'
" hide cursor
let g:fern#hide_cursor = 1
" show hidden files
let g:fern#default_hidden = 1
" toggle fern with <C-n>
nnoremap <silent> <C-n> :<C-u>Fern . -drawer -stay -keep -toggle -reveal=%<CR>

function! s:vimenter_fern() abort
  " open fern when no args given
  if argc() == 0 && !exists('s:std_in')
    Fern . -drawer -keep -toggle
  endif
endfunction

function! s:filetype_fern() abort
  " hide number
  setlocal nonumber
  " use open:select as default
  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)
  " set key maps
  nmap <buffer><nowait> s <Plug>(fern-action-open:split)
  nmap <buffer><nowait> v <Plug>(fern-action-open:vsplit)
  nmap <buffer><nowait> r <Plug>(fern-action-reload)
  nmap <buffer><nowait> N <Plug>(fern-action-new-path)
  nmap <buffer><nowait> <CR> <Plug>(fern-action-cd)<Plug>(fern-action-enter)
endfunction

augroup __fern__
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * ++nested call s:vimenter_fern()
  autocmd FileType fern call s:filetype_fern()
augroup END

"#--------------------------------------------------#
"# vim-airline/vim-airline                          #
"#--------------------------------------------------#
" use powerline fonts
let g:airline_powerline_fonts = 1
" enable tabline extension
let g:airline#extensions#tabline#enabled = 1
" dont show buffers on the right of tabs
let g:airline#extensions#tabline#show_splits = 0
" remove 'X' at the end of the tabline
let g:airline#extensions#tabline#show_close_button = 0
" show file name only
let g:airline#extensions#tabline#fnamemod = ':t'
" dont show tabs or buffers label
let g:airline#extensions#tabline#tabs_label = ''
let g:airline#extensions#tabline#buffers_label = ''
" dont show tab count
let g:airline#extensions#tabline#show_tab_count = 0

"#--------------------------------------------------#
"# vim-airline/vim-airline-themes                   #
"#--------------------------------------------------#
" set color theme of airline
let g:airline_theme = 'hybrid'

"#--------------------------------------------------#
"# scrooloose/nerdtree                              #
"#--------------------------------------------------#
"augroup nerdtree
"  autocmd!
"augroup END
"" toggle nerdtree with <C-n>
"noremap <C-n> :NERDTreeToggle<CR>
"" show hidden files
"let NERDTreeShowHidden = 1
"" change default key maps
"autocmd nerdtree FileType nerdtree nmap <buffer><nowait> s :call<Space>nerdtree#ui_glue#invokeKeyMap('i')<CR>
"autocmd nerdtree FileType nerdtree nmap <buffer><nowait> v :call<Space>nerdtree#ui_glue#invokeKeyMap('s')<CR>
"" open nerdtree when starting vim without any args or stdin
"function! s:init_nerdtree() abort
"  if argc() == 0 && !exists('s:std_in')
"    NERDTree
"    wincmd p
"    close
"  endif
"endfunction
"autocmd nerdtree StdinReadPre * let s:std_in=1
"autocmd nerdtree VimEnter * call s:init_nerdtree()

"#--------------------------------------------------#
"# fatih/vim-go                                     #
"#--------------------------------------------------#
let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 1
let g:go_list_type = "quickfix"
nnoremap <leader>n :cnext<CR>
nnoremap <leader>p :cprevious<CR>
nnoremap <leader>c :cclose<CR>
